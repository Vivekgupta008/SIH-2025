/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace DigitalIDRegistry {
  export type DigitalIDStruct = {
    contentHash: BytesLike;
    issuer: AddressLike;
    issuedAt: BigNumberish;
    validTo: BigNumberish;
    revoked: boolean;
  };

  export type DigitalIDStructOutput = [
    contentHash: string,
    issuer: string,
    issuedAt: bigint,
    validTo: bigint,
    revoked: boolean
  ] & {
    contentHash: string;
    issuer: string;
    issuedAt: bigint;
    validTo: bigint;
    revoked: boolean;
  };
}

export interface DigitalIDRegistryInterface extends Interface {
  getFunction(
    nameOrSignature: "get" | "idCounter" | "ids" | "issue" | "revoke"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Issued" | "Revoked"): EventFragment;

  encodeFunctionData(functionFragment: "get", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "idCounter", values?: undefined): string;
  encodeFunctionData(functionFragment: "ids", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "issue",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revoke",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "idCounter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ids", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "issue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
}

export namespace IssuedEvent {
  export type InputTuple = [
    id: BigNumberish,
    contentHash: BytesLike,
    issuer: AddressLike,
    validTo: BigNumberish
  ];
  export type OutputTuple = [
    id: bigint,
    contentHash: string,
    issuer: string,
    validTo: bigint
  ];
  export interface OutputObject {
    id: bigint;
    contentHash: string;
    issuer: string;
    validTo: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevokedEvent {
  export type InputTuple = [id: BigNumberish, issuer: AddressLike];
  export type OutputTuple = [id: bigint, issuer: string];
  export interface OutputObject {
    id: bigint;
    issuer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DigitalIDRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): DigitalIDRegistry;
  waitForDeployment(): Promise<this>;

  interface: DigitalIDRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  get: TypedContractMethod<
    [id: BigNumberish],
    [DigitalIDRegistry.DigitalIDStructOutput],
    "view"
  >;

  idCounter: TypedContractMethod<[], [bigint], "view">;

  ids: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, boolean] & {
        contentHash: string;
        issuer: string;
        issuedAt: bigint;
        validTo: bigint;
        revoked: boolean;
      }
    ],
    "view"
  >;

  issue: TypedContractMethod<
    [contentHash: BytesLike, subject: AddressLike, validTo: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  revoke: TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "get"
  ): TypedContractMethod<
    [id: BigNumberish],
    [DigitalIDRegistry.DigitalIDStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "idCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ids"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, boolean] & {
        contentHash: string;
        issuer: string;
        issuedAt: bigint;
        validTo: bigint;
        revoked: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "issue"
  ): TypedContractMethod<
    [contentHash: BytesLike, subject: AddressLike, validTo: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revoke"
  ): TypedContractMethod<[id: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "Issued"
  ): TypedContractEvent<
    IssuedEvent.InputTuple,
    IssuedEvent.OutputTuple,
    IssuedEvent.OutputObject
  >;
  getEvent(
    key: "Revoked"
  ): TypedContractEvent<
    RevokedEvent.InputTuple,
    RevokedEvent.OutputTuple,
    RevokedEvent.OutputObject
  >;

  filters: {
    "Issued(uint256,bytes32,address,uint256)": TypedContractEvent<
      IssuedEvent.InputTuple,
      IssuedEvent.OutputTuple,
      IssuedEvent.OutputObject
    >;
    Issued: TypedContractEvent<
      IssuedEvent.InputTuple,
      IssuedEvent.OutputTuple,
      IssuedEvent.OutputObject
    >;

    "Revoked(uint256,address)": TypedContractEvent<
      RevokedEvent.InputTuple,
      RevokedEvent.OutputTuple,
      RevokedEvent.OutputObject
    >;
    Revoked: TypedContractEvent<
      RevokedEvent.InputTuple,
      RevokedEvent.OutputTuple,
      RevokedEvent.OutputObject
    >;
  };
}
